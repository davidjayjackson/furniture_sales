---
title: "Project 8: Predictive Sales Analytics"
subtitle: "Objective: Use historical sales data to forecast future sales and trends"
format: pptx
editor: visual
---

```{r setup}
library(tidyverse)
library(lubridate)
library(forecast)
library(scales) # format x an y labels in ggploty
library(gt) # table formatter
library(duckdb)
library(DBI)
knitr::opts_chunk$set(echo = TRUE,message = FALSE, warning = FALSE)
```

```{r}
rm(list=ls())
```
```{r}
# Check if 'con' exists and is valid
if (exists("con") && dbIsValid(con)) {
  # Connection exists and is valid; go straight to querying
  
  sales <- dbGetQuery(con, "SELECT * FROM sales;")
  dbDisconnect(con)
} else {
  # Connection does not exist or is invalid; establish connection first
  con <- dbConnect(duckdb(), "./furniture_mart.duckdb")
  sales <- dbGetQuery(con, "SELECT * FROM sales;")
  dbDisconnect(con)
}
```

# 1. Identify seasonal trends by analyzing sales data from previous years and group them by month.

```{r}

# Ensure date column is in Date format
data <- sales %>% 
  mutate(order_date = as.Date(order_date))

# Extract year and month for seasonal analysis
data <- data %>%
  mutate(year = year(order_date),
         month = month(order_date, label = TRUE))

# Summarize monthly sales totals by year
monthly_sales <- data %>%
  group_by(year, month) %>%
  summarize(total_sales = sum(total_sales, na.rm = TRUE))
```
```{r}
# Plot with factor grouping for year without gradient scale
ggplot(monthly_sales, aes(x = month, y = total_sales, group = factor(year), color = factor(year))) +
  geom_line() +
  labs(title = "Monthly Sales Trend Over Time by Year",
       x = "Month", y = "Total Sales", color = "Year") +
  theme_minimal()

```
```{r}
# Revised faceted plot by year with ordered month and factor for year
ggplot(monthly_sales, aes(x = month, y = total_sales)) +
  geom_line(aes(color = factor(year), group = year)) +
  facet_wrap(~ factor(year), ncol = 1) +
  labs(title = "Monthly Sales Trends by Year",
       x = "Month", y = "Total Sales", color = "Year") +
  theme_minimal()
```


# 2. Generate a rolling 12-month sales forecast based on historical sales.


```{r}
library(zoo)

# Summarize and prepare monthly sales data, ensuring all months are present
monthly_sales_ts <- monthly_sales %>%
  group_by(year, month) %>%
  summarize(total_sales = sum(total_sales, na.rm = TRUE)) %>%
  ungroup() %>%
  # Combine year and month into a Date column (1st of each month)
  mutate(date = as.Date(paste(year, month, "01", sep = "-"), format = "%Y-%b-%d")) %>%
  # Ensure complete date sequence, filling missing months with NA
  complete(date = seq.Date(min(date), max(date), by = "month")) %>%
  replace_na(list(total_sales = 0)) %>%  # Fill missing sales with 0 if appropriate
  select(date, total_sales)

# Create a time series object from the cleaned data
sales_ts <- ts(monthly_sales_ts$total_sales, start = c(year(min(monthly_sales_ts$date)), month(min(monthly_sales_ts$date))), frequency = 12)

# Fit an ARIMA model to the time series
arima_model <- auto.arima(sales_ts)

# Forecast the next 12 months
forecast_sales <- forecast(arima_model, h = 12)

# Plot historical sales and forecasted sales
autoplot(forecast_sales) +
  labs(title = "12-Month Rolling Sales Forecast",
       x = "Date", y = "Total Sales") +
  theme_minimal()



```

# 3. Predict which product sub-categories are likely to see increased sales in the upcoming months

```{r}

# Convert dates to Date format if not already
online_sales <- sales %>%
  mutate(order_date = as.Date(order_date))

# Summarize monthly sales by sub_category
monthly_sales <- online_sales %>%
  group_by(sub_category, month = floor_date(order_date, "month")) %>%
  summarise(total_sales = sum(total_sales, na.rm = TRUE)) %>%
  ungroup()

# Plot monthly sales trends with trendlines for each sub_category
ggplot(monthly_sales, aes(x = month, y = total_sales, color = sub_category)) +
  geom_line(size = 1) +
  geom_smooth(method = "lm", se = FALSE, linetype = "dashed") +  # Add trendline
  labs(title = "Monthly Sales Trends by Sub-Category with Trendlines",
       x = "Month",
       y = "Total Sales") +
  theme_minimal() +
  theme(legend.position = "bottom") +
  facet_wrap(~sub_category, scales = "free_y") # Separate each sub-category in a facet

# Forecast future sales for each sub_category
sub_category_forecasts <- monthly_sales %>%
  split(.$sub_category) %>%
  map(~ {
    ts_data <- ts(.x$total_sales, frequency = 12, start = c(year(min(.x$month)), month(min(.x$month))))
    fit <- auto.arima(ts_data)  # Fit an ARIMA model
    forecasted <- forecast(fit, h = 6)  # Forecast for the next 6 months
    autoplot(forecasted) + 
      ggtitle(paste("Forecast for", unique(.x$sub_category))) + 
      geom_smooth(method = "lm", se = FALSE, linetype = "dashed")  # Add trendline to forecast plot
  })

# Display forecasts
sub_category_forecasts






```

# 4. Create a forecasting report that breaks down future sales expectations by region and market  segment.

```{r}
# Load necessary libraries

# Convert dates to Date format if not already
online_sales <- sales %>%
  mutate(order_date = as.Date(order_date))

# Summarize monthly sales by region and market segment
monthly_sales_region_segment <- online_sales %>%
  group_by(region, market_segment, month = floor_date(order_date, "month")) %>%
  summarise(total_sales = sum(total_sales, na.rm = TRUE)) %>%
  ungroup()

# Initialize list to store forecast plots for each region and market segment
region_segment_forecasts <- monthly_sales_region_segment %>%
  split(., list(.$region, .$market_segment), drop = TRUE) %>%
  map(~ {
    ts_data <- ts(.x$total_sales, frequency = 12, start = c(year(min(.x$month)), month(min(.x$month))))
    fit <- auto.arima(ts_data)  # Fit an ARIMA model
    forecasted <- forecast(fit, h = 6)  # Forecast for the next 6 months
    
    # Create a dataframe of actual and forecasted values for plotting with trendline
    actual_data <- data.frame(month = .x$month, total_sales = .x$total_sales)
    forecast_data <- data.frame(month = seq(max(.x$month) + months(1), length.out = 6, by = "month"),
                                total_sales = as.numeric(forecasted$mean))
    
    combined_data <- bind_rows(actual_data, forecast_data)
    
    # Plot historical data with forecast and trendline
    ggplot(combined_data, aes(x = month, y = total_sales)) +
      geom_line(color = "blue", size = 1) +  # Historical data and forecast line
      geom_smooth(method = "lm", se = FALSE, linetype = "dashed", color = "red") +  # Trendline
      labs(title = paste("Forecast for Region:", unique(.x$region), 
                         "| Market Segment:", unique(.x$market_segment)),
           x = "Month",
           y = "Total Sales") +
      theme_minimal()
  })

# Display forecasts with trendlines
region_segment_forecasts



```

# 5. Suggest potential growth strategies for underperforming categories based on past data analysis.


By implementing these data-driven strategies, you can target the unique challenges and opportunities within each underperforming category, encouraging growth and expanding your market reach. Let me know if youâ€™d like further tailored strategies based on specific sub_category performance!