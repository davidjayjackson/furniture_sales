---
title: "Project 7: Furniture Mark, Marketing Campaign ROI Analysis"
subtitle: " Objective: Analyze the return on investment (ROI) for various marketing campaigns"
format: html
editor: visual
---

```{r setup}
library(tidyverse)
library(lubridate)
library(forecast)
library(scales) # format x an y labels in ggploty
library(gt) # table formatter
library(duckdb)
library(DBI)
knitr::opts_chunk$set(echo = TRUE,message = FALSE, warning = FALSE)
```

```{r}
rm(list=ls())
```
```{r}
# Check if 'con' exists and is valid
if (exists("con") && dbIsValid(con)) {
  # Connection exists and is valid; go straight to querying
  
  sales <- dbGetQuery(con, "SELECT * FROM sales;")
  dbDisconnect(con)
} else {
  # Connection does not exist or is invalid; establish connection first
  con <- dbConnect(duckdb(), "./furniture_mart.duckdb")
  sales <- dbGetQuery(con, "SELECT * FROM sales;")
  dbDisconnect(con)
}
```


# 1. Track which customers were part of each marketing campaign by analyzing the market_segment or region data.

```{r}

# Assuming your data is in a data frame called `data_df`

# 1. Bar Plot of Customer Count by Market Segment
customer_segment_count <- sales %>%
  select(customer_id, market_segment) %>%
  distinct() %>%
  count(market_segment)

ggplot(customer_segment_count, aes(x = market_segment, y = n, fill = market_segment)) +
  geom_bar(stat = "identity") +
  labs(title = "Customer Count by Market Segment",
       x = "Market Segment",
       y = "Number of Customers") +
  theme_minimal()

# 2. Stacked Bar Plot of Customer Count by Market Segment and Region
customer_segment_region_count <- sales %>%
  select(customer_id, market_segment, region) %>%
  distinct() %>%
  count(market_segment, region)

ggplot(customer_segment_region_count, aes(x = market_segment, y = n, fill = region)) +
  geom_bar(stat = "identity", position = "stack") +
  labs(title = "Customer Count by Market Segment and Region",
       x = "Market Segment",
       y = "Number of Customers") +
  theme_minimal()


```


# 2. Calculate total sales generated by each campaign and the total profit contribution.

```{r}

# Assuming your data is in a data frame called `data_df`

# 1. Calculate Total Sales and Profit by Market Segment and Region
campaign_sales_profit <- sales %>%
  group_by(market_segment, region) %>%
  summarise(
    total_sales = sum(as.numeric(total_sales), na.rm = TRUE),
    total_profit = sum(as.numeric(profit), na.rm = TRUE)
  ) %>%
  arrange(desc(total_sales))

# Display the summarized data
print(campaign_sales_profit)

# 2. Bar Plot for Total Sales by Market Segment and Region
ggplot(campaign_sales_profit, aes(x = market_segment, y = total_sales, fill = region)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Total Sales by Market Segment and Region",
       x = "Market Segment",
       y = "Total Sales") +
  theme_minimal()

# 3. Bar Plot for Total Profit by Market Segment and Region
ggplot(campaign_sales_profit, aes(x = market_segment, y = total_profit, fill = region)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Total Profit by Market Segment and Region",
       x = "Market Segment",
       y = "Total Profit") +
  theme_minimal()


```

# 3. Determine which campaigns yielded the highest return on investment (ROI) based on total profit.

```{r}
library(dplyr)
library(ggplot2)

# Assuming your data is in a data frame called `data_df`

# 1. Calculate Total Sales, Total Profit, and ROI by Market Segment and Region
campaign_roi <- sales %>%
  group_by(market_segment, region) %>%
  summarise(
    total_sales = sum(as.numeric(total_sales), na.rm = TRUE),
    total_profit = sum(as.numeric(profit), na.rm = TRUE)
  ) %>%
  mutate(ROI = (total_profit / total_sales) * 100) %>%
  arrange(desc(ROI))

# Display the summarized data with ROI
print(campaign_roi)

# 2. Bar Plot for ROI by Market Segment and Region
ggplot(campaign_roi, aes(x = market_segment, y = ROI, fill = region)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "ROI by Market Segment and Region",
       x = "Market Segment",
       y = "Return on Investment (ROI) %") +
  theme_minimal()


```

# 4. Analyze sales trends before and after each marketing campaign to evaluate its impact.

```{r}

# Assuming your data is in a data frame called `data_df`

# 1. Add Year and Month columns to aggregate monthly sales for trend analysis
data_df <- sales %>%
  mutate(
    order_date = as.Date(order_date),
    year_month = floor_date(order_date, "month")  # Round dates to the start of each month
  )

# 2. Calculate Monthly Sales
monthly_sales <- data_df %>%
  group_by(year_month, market_segment) %>%
  summarise(total_sales = sum(as.numeric(total_sales), na.rm = TRUE)) %>%
  arrange(year_month)

# 3. Plot Monthly Sales Trends with Campaign Periods
ggplot(monthly_sales, aes(x = year_month, y = total_sales, color = market_segment)) +
  geom_line(size = 1) +
  labs(title = "Monthly Sales Trends by Market Segment",
       x = "Date",
       y = "Total Sales") +
  theme_minimal()


```

```{r}
# Sample campaign periods as an example (adjust dates as needed)
campaign_periods <- data.frame(
  start = as.Date(c("2021-05-01", "2022-07-01")),
  end = as.Date(c("2021-07-31", "2022-09-30")),
  campaign = c("Campaign 1", "Campaign 2")
)

# Add shaded regions to represent campaign periods
ggplot(monthly_sales, aes(x = year_month, y = total_sales, color = market_segment)) +
  geom_line(size = 1) +
  labs(title = "Monthly Sales Trends with Campaign Periods",
       x = "Date",
       y = "Total Sales") +
  theme_minimal() +
  geom_rect(data = campaign_periods, aes(xmin = start, xmax = end, ymin = -Inf, ymax = Inf, fill = campaign),
            alpha = 0.2, inherit.aes = FALSE)
```

```{r}


# Assuming your data is in a data frame called `data_df`

# 1. Add Year-Quarter columns to aggregate quarterly sales for trend analysis
data_df <- sales %>%
  mutate(
    order_date = as.Date(order_date),
    year_quarter = paste(year(order_date), quarter(order_date), sep = "Q")  # Format as Year-Quarter
  )

# 2. Calculate Quarterly Sales
quarterly_sales <- data_df %>%
  group_by(year_quarter, market_segment) %>%
  summarise(total_sales = sum(as.numeric(total_sales), na.rm = TRUE)) %>%
  arrange(year_quarter)

# 3. Plot Quarterly Sales Trends with Campaign Periods
ggplot(quarterly_sales, aes(x = year_quarter, y = total_sales, color = market_segment, group = market_segment)) +
  geom_line(size = 1) +
  geom_point() +
  labs(title = "Quarterly Sales Trends by Market Segment",
       x = "Quarter",
       y = "Total Sales") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}


# 1. Add Year-Quarter columns to aggregate quarterly sales for trend analysis
data_df <- sales %>%
  mutate(
    order_date = as.Date(order_date),
    year_quarter = paste(year(order_date), quarter(order_date), sep = "Q")  # Format as Year-Quarter
  )

# 2. Calculate Quarterly Sales
quarterly_sales <- data_df %>%
  group_by(year_quarter, market_segment) %>%
  summarise(total_sales = sum(as.numeric(total_sales), na.rm = TRUE)) %>%
  arrange(year_quarter)

# 3. Column Plot for Quarterly Sales Trends by Market Segment
ggplot(quarterly_sales, aes(x = year_quarter, y = total_sales, fill = market_segment)) +
  geom_col(position = "dodge") +
  labs(title = "Quarterly Sales Trends by Market Segment",
       x = "Quarter",
       y = "Total Sales") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))



```


# 5. Create a segmentation analysis to understand which customer groups responded best to each  campaign

```{r}


# 1. Calculate Total Sales and Profit by Market Segment and Region for Segmentation Analysis
segmentation_response <- sales %>%
  group_by(market_segment, region) %>%
  summarise(
    total_sales = sum(as.numeric(total_sales), na.rm = TRUE),
    total_profit = sum(as.numeric(profit), na.rm = TRUE),
    avg_sales_per_customer = mean(as.numeric(total_sales), na.rm = TRUE),
    customer_count = n_distinct(customer_id)
  ) %>%
  arrange(desc(total_sales))

# Display segmentation response table
print(segmentation_response)

# 2. Plot Total Sales by Segment and Region to Visualize Response Strength
ggplot(segmentation_response, aes(x = market_segment, y = total_sales, fill = region)) +
  geom_col(position = "dodge") +
  labs(title = "Customer Response by Segment and Region",
       x = "Market Segment",
       y = "Total Sales") +
  theme_minimal()

# 3. Plot Average Sales per Customer by Segment and Region for Additional Insight
ggplot(segmentation_response, aes(x = market_segment, y = avg_sales_per_customer, fill = region)) +
  geom_col(position = "dodge") +
  labs(title = "Average Sales per Customer by Segment and Region",
       x = "Market Segment",
       y = "Average Sales per Customer") +
  theme_minimal()


```